@page "/"
@using Domain.Interface
@using Domain.Repositories
@inject IJSRuntime JS
@inject IRepositoryAsync<Post> PostRepositoryAsync
@inject IRepositoryAsync<User> UserRepositoryAsync
@rendermode InteractiveServer

<PageTitle>Posts</PageTitle>

<div class="row mt-4">
    <h1 class="text-center display-4 fw-bold text-primary">Alle Posts</h1>
    @foreach (var post in posts)
    {
        var user = users.FirstOrDefault(u => u.Id == post.UserId);
        <div class="col-md-6 mb-4">
            <div class="card shadow border-0">
                <div class="card-body d-flex justify-content-between align-items-center">
                    <div>
                        <h5 class="card-title fw-bold">@user?.Username</h5>
                        <h6 class="card-subtitle mb-2 text-muted">@post.CreatedAt.ToString("dd.MM.yyyy HH:mm")</h6>
                        <p class="card-text">@post.Text</p>
                    </div>
                    <div>
                        <button class="btn btn-danger" @onclick="() => DeletePost(post)">Delete</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    List<User> users = new List<User>();
    List<Post> posts = new List<Post>();

    protected override async Task OnInitializedAsync()
    {
        users = await UserRepositoryAsync.ReadAllAsync();
        posts = await PostRepositoryAsync.ReadAllAsync();
    }

    private async Task DeletePost(Post current)
    {
        await PostRepositoryAsync.DeleteAsync(current);
        posts.Remove(current);
        StateHasChanged();
    }
}