@page "/counter"
@using Domain.Interface
@using Model.Entities
@rendermode InteractiveServer
@inject IRepositoryAsync<Post> PostRepositoryAsync
@inject IRepositoryAsync<User> UserRepositoryAsync
@inject LogInState LoginState
@inject NavigationManager Navigation

<PageTitle>Counter</PageTitle>

<style>
    .card {
        background-color: #393E46;
        color: white;
        border: none;
    }

    .card-header {
        background-color: #00ADB5 !important;
        color: white !important;
    }

    .form-control {
        background-color: #454b56;
        color: white;
        border-color: #5a6268;
    }

    .form-control:focus {
        background-color: #454b56;
        color: white;
        border-color: #00ADB5;
        box-shadow: 0 0 0 0.2rem rgba(0, 173, 181, 0.25);
    }

    .btn-primary {
        background-color: #00ADB5;
        border-color: #00ADB5;
    }

    .btn-primary:hover {
        background-color: #008c94;
        border-color: #008c94;
    }

    .form-label {
        color: #00ADB5 !important;
    }

    select.form-control {
        background-color: #454b56;
        color: white;
    }
</style>

@if (LoginState?.CurrentSession == null)
{
    <p>Umleitung...</p>
}
else
{
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card shadow-sm">
                    <div class="card-header">
                        <h3 class="mb-0">Create a New Post</h3>
                    </div>
                    <div class="card-body">
                        <EditForm Model="_newPost" OnValidSubmit="CreatePost">
                            <DataAnnotationsValidator/>

                            <div class="mb-3">
                                <label class="form-label">Text</label>
                                <input type="text" class="form-control" @bind="_newPost.Text" placeholder="Enter your post text">
                                <ValidationMessage For="() => _newPost.Text" class="text-danger"/>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Category</label>
                                <select class="form-control" @bind="_newPost.Category">
                                    <option value="Task">Task</option>
                                    <option value="Note">Note</option>
                                    <option value="Reminder">Reminder</option>
                                    <option value="Appointment">Appointment</option>
                                </select>
                            </div>

                            @if (_newPost.Category == "Task" || _newPost.Category == "Reminder" || _newPost.Category == "Appointment")
                            {
                                <div class="mb-3">
                                    <label class="form-label">@(_newPost.Category == "Task" ? "Deadline" : "Date")</label>
                                    <input type="datetime-local" class="form-control" @bind="_newPost.Deadline">
                                </div>
                            }

                            <div class="text-end">
                                <button type="submit" class="btn btn-primary">
                                    <i class="bi bi-plus-circle"></i> Add Post
                                </button>
                            </div>
                        </EditForm>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger mt-3">@errorMessage</div>
                        }

                        @if (isSuccess)
                        {
                            <div class="alert alert-success mt-3" role="alert">
                                Beitrag wurde erfolgreich hinzugefügt.
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private Post _newPost = new Post();
    private string errorMessage = string.Empty;
    private bool isSuccess = false;

    protected async override Task OnInitializedAsync()
    {
        if (LoginState?.CurrentSession == null)
        {
            Navigation.NavigateTo("/login", forceLoad: true);
            return;
        }
        _newPost.CreatedAt = DateTime.Now;
        _newPost.UserId = LoginState.CurrentSession.Id;
    }

    protected async Task CreatePost()
    {
        try
        {
            if (_newPost.Category == "Note")
            {
                _newPost.Deadline = DateTime.MinValue;
            }
            await PostRepositoryAsync.CreateAsync(_newPost);
            isSuccess = true;
            StateHasChanged();
            await Task.Delay(1000);
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = "Fehler beim Erstellen des Beitrags.";
            Console.WriteLine(ex.Message);
        }
    }
}