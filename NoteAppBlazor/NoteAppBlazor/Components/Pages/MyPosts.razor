@page "/"
@using Domain.Interface
@using Domain.Repositories
@using Model.Entities
@inject IJSRuntime JS
@inject IRepositoryAsync<Post> PostRepositoryAsync
@inject IRepositoryAsync<User> UserRepositoryAsync
@inject LogInState LoginState
@inject NavigationManager NavManager
@rendermode InteractiveServer
@inject LogInState LogInState

<PageTitle>Posts</PageTitle>

<style>

    .main{
        color: #00ADB5 !important;
    }
    .card {
        background-color: #454b56;
        color: white;
    }
    
    .card-title, .card-subtitle, .card-text {
        color: white !important;
    }
    
    .text-muted {
        color: #adb5bd !important;
    }
    
    .form-control {
        background-color: #454b56;
        color: white;
        border-color: #5a6268;
    }
    .input-group-text{
        background-color: #222831;
    }
    
    .form-control:focus {
        background-color: #454b56;
        color: white;
        border-color: #80bdff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }
    
    .modal-content {
        background-color: #454b56;
        color: white;
    }
    
    .btn-close {
        filter: invert(1);
    }

</style>

@if (LoginState?.CurrentSession == null)
{
    <p>Umleitung...</p>
}
else
{
    <div class="row mt-4">
        <button class="btn btn-danger" style="width: 10%" @onclick="() => Logout()">
            Logout
        </button>
        <h1 class="text-center display-4 fw-bold main">Meine Posts</h1>

        <div class="col-12 mb-3 d-flex justify-content-center">
            <div class="input-group shadow-sm" style="max-width: 500px;">
                <span class="input-group-text  border-0">
                    <i class="bi bi-search text-white"></i>
                </span>
                <input type="text" class="form-control border-0 shadow-sm" 
                       placeholder="Suche nach Titel..." 
                       @bind="searchQuery" @bind:event="oninput"
                       style="border-radius: 25px;">
            </div>
        </div>

        @foreach (var post in posts
            .Where(p => string.IsNullOrWhiteSpace(searchQuery) || p.Text.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
            .OrderByDescending(p => p.IsFavorite)
            .ThenByDescending(p => p.CreatedAt))
        {
            if (LoginState.CurrentSession.Id == post.UserId)
            {
                var user = users.FirstOrDefault(u => u.Id == post.UserId);
                <div class="col-md-6 mb-4">
                    <div class="card shadow border-0">
                        <div class="card-body d-flex justify-content-between align-items-center">
                            <div>
                                <!-- Username und Datum in einer Zeile -->
                                <div class="d-flex align-items-center gap-2 mb-2">
                                    <h5 class="card-title fw-bold mb-0">@user?.Username</h5>
                                    <h6 class="card-subtitle mb-0" style="color: #adb5bd;">@post.CreatedAt.ToString("dd.MM.yyyy HH:mm")</h6>
                                </div>

                                <p class="card-text">
                                    @post.Text <span style="color: #adb5bd; opacity: 0.7;">@(post.IsEdited ? "(Bearbeitet)" : "")</span>
                                </p>

                                <!-- Deadline Info in einer Zeile -->
                                <div class="d-flex flex-column gap-2 mb-2">
                                    <span style="color: #adb5bd;">Deadline: @post.Deadline.ToString("dd.MM.yyyy HH:mm")</span>

                                    <div class="d-flex align-items-center gap-2">
                                        @if (post.Deadline != DateTime.MinValue)
                                        {
                                            var daysUntilDeadline = (post.Deadline.Date - DateTime.Now.Date).Days;
                                            string deadlineMessage = "";
                                            string bgColor = "bg-secondary";

                                            if (daysUntilDeadline == 2)
                                            {
                                                deadlineMessage = "Fällig in 2 Tagen";
                                                bgColor = "bg-info-subtle";
                                            }
                                            else if (daysUntilDeadline == 1)
                                            {
                                                deadlineMessage = "Morgen fällig";
                                                bgColor = "bg-info";
                                            }
                                            else if (daysUntilDeadline == 0)
                                            {
                                                deadlineMessage = "Heute fällig";
                                                bgColor = "bg-warning";
                                            }
                                            else if (daysUntilDeadline == -1)
                                            {
                                                deadlineMessage = "Gestern fällig";
                                                bgColor = "bg-danger";
                                            }

                                            @if (!string.IsNullOrEmpty(deadlineMessage))
                                            {
                                                <span class="badge @bgColor text-dark p-2" style="border-radius: 6px">
                                                    @deadlineMessage
                                                </span>
                                            }
                                        }

                                        @if (!string.IsNullOrEmpty(post.Category))
                                        {
                                            var categoryBgColor = post.Category.ToLower() switch
                                            {
                                                "task" => "bg-secondary",
                                                "node" => "bg-secondary",
                                                "assignment" => "bg-secondary",
                                                "reminder" => "bg-secondary",
                                                _ => "bg-secondary"
                                            };

                                            <span class="badge @categoryBgColor text-light p-2" style="border-radius: 6px">
                                                @post.Category
                                            </span>
                                        }
                                    </div>
                                </div>
                            </div>
                            
                            <div class="d-flex align-items-center">
                                <button class="btn btn-link fs-4" @onclick="() => ToggleFavorite(post)">
                                    @if (post.IsFavorite)
                                    {
                                        <span style="color: gold;">★</span>
                                    }
                                    else
                                    {
                                        <span style="color: gray;">☆</span>
                                    }
                                </button>
                                <button class="btn btn-lg ms-2" @onclick="() => OpenEditModal(post)">
                                    <i class="bi bi-pencil text-white">✏️</i>
                                </button>
                                <button class="btn btn-lg ms-2" @onclick="() => DeletePost(post)">
                                    <i class="bi bi-trash text-white">🗑️</i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
}

@if (isEditModalOpen)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Post bearbeiten</h5>
                    <button type="button" class="btn-close" @onclick="CloseEditModal"></button>
                </div>
                <div class="modal-body">
                    <textarea class="form-control" rows="5" @bind="editPostText" style="background-color: #454b56; color: white;"></textarea>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">Abbrechen</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveEdit">Speichern</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    List<User> users = new();
    List<Post> posts = new();
    string searchQuery = "";
    bool isEditModalOpen = false;
    Post? editingPost = null;
    string editPostText = "";

    protected override async Task OnInitializedAsync()
    {
        if (LoginState?.CurrentSession == null)
        {
            NavManager.NavigateTo("/login", forceLoad: true);
            return;
        }
        users = await UserRepositoryAsync.ReadAllAsync();
        posts = await PostRepositoryAsync.ReadAllAsync();
    }

    private async Task DeletePost(Post current)
    {
        await PostRepositoryAsync.DeleteAsync(current);
        posts.Remove(current);
        StateHasChanged();
    }

    private async Task ToggleFavorite(Post post)
    {
        post.IsFavorite = !post.IsFavorite;
        await PostRepositoryAsync.UpdateAsync(post);
        posts = posts.OrderByDescending(p => p.IsFavorite).ThenByDescending(p => p.CreatedAt).ToList();
        StateHasChanged();
    }

    private void OpenEditModal(Post post)
    {
        editingPost = post;
        editPostText = post.Text;
        isEditModalOpen = true;
    }

    private void CloseEditModal()
    {
        isEditModalOpen = false;
    }

    private async Task SaveEdit()
    {
        if (editingPost != null)
        {
            editingPost.Text = editPostText;
            editingPost.IsEdited = true;
            await PostRepositoryAsync.UpdateAsync(editingPost);
        }
        isEditModalOpen = false;
    }
    private async Task Logout()
    {
 
        LogInState.ClearSession();
        Console.WriteLine("Session cleared!");
        NavManager.NavigateTo("/login"); 
    }
}