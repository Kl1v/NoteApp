@page "/"
@using Domain.Interface
@using Domain.Repositories
@using Model.Entities
@inject IJSRuntime JS
@inject IRepositoryAsync<Post> PostRepositoryAsync
@inject IRepositoryAsync<User> UserRepositoryAsync
@inject LogInState LoginState
@inject NavigationManager NavManager
@rendermode InteractiveServer

<PageTitle>Posts</PageTitle>

@if (LoginState?.CurrentSession == null)
{
    <p>Umleitung...</p>
}
else
{
    <div class="row mt-4">
        <h1 class="text-center display-4 fw-bold text-primary">Meine Posts</h1>

        <div class="col-12 mb-3 d-flex justify-content-center">
            <div class="input-group shadow-sm" style="max-width: 500px;">
                <span class="input-group-text bg-white border-0">
                    <i class="bi bi-search text-primary"></i>
                </span>
                <input type="text" class="form-control border-0 shadow-sm" 
                       placeholder="Suche nach Titel..." 
                       @bind="searchQuery" @bind:event="oninput"
                       style="border-radius: 25px;">
            </div>
        </div>

        @foreach (var post in posts
            .Where(p => string.IsNullOrWhiteSpace(searchQuery) || p.Text.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
            .OrderByDescending(p => p.IsFavorite)
            .ThenByDescending(p => p.CreatedAt))
        {
            if (LoginState.CurrentSession.Id == post.UserId)
            {
                var user = users.FirstOrDefault(u => u.Id == post.UserId);
                <div class="col-md-6 mb-4">
                    <div class="card shadow border-0">
                        <div class="card-body d-flex justify-content-between align-items-center">
                            <div>
                                <h5 class="card-title fw-bold">@user?.Username</h5>
                                <h6 class="card-subtitle mb-2 text-muted">@post.CreatedAt.ToString("dd.MM.yyyy HH:mm")</h6>
                                <p class="card-text">
                                    @post.Text @(post.IsEdited ? "(Bearbeitet)" : "")
                                </p>
                                <p class="card-text text-muted">Kategorie: @post.Category</p>
                            </div>
                            <div class="d-flex align-items-center">
                                <button class="btn btn-link fs-4" @onclick="() => ToggleFavorite(post)">
                                    @if (post.IsFavorite)
                                    {
                                        <span style="color: gold;">★</span>
                                    }
                                    else
                                    {
                                        <span style="color: gray;">☆</span>
                                    }
                                </button>
                                <button class="btn btn-lg ms-2" @onclick="() => OpenEditModal(post)">
                                    <i class="bi bi-pencil">✏️</i>
                                </button>
                                <button class="btn btn-lg ms-2" @onclick="() => DeletePost(post)">
                                    <i class="bi bi-trash">🗑️</i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
}

@if (isEditModalOpen)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Post bearbeiten</h5>
                    <button type="button" class="btn-close" @onclick="CloseEditModal"></button>
                </div>
                <div class="modal-body">
                    <textarea class="form-control" rows="5" @bind="editPostText"></textarea>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">Abbrechen</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveEdit">Speichern</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    List<User> users = new();
    List<Post> posts = new();
    string searchQuery = "";
    bool isEditModalOpen = false;
    Post? editingPost = null;
    string editPostText = "";

    protected override async Task OnInitializedAsync()
    {
        if (LoginState?.CurrentSession == null)
        {
            NavManager.NavigateTo("/login", forceLoad: true);
            return;
        }
        users = await UserRepositoryAsync.ReadAllAsync();
        posts = await PostRepositoryAsync.ReadAllAsync();
    }

    private async Task DeletePost(Post current)
    {
        await PostRepositoryAsync.DeleteAsync(current);
        posts.Remove(current);
        StateHasChanged();
    }

    private async Task ToggleFavorite(Post post)
    {
        post.IsFavorite = !post.IsFavorite;
        await PostRepositoryAsync.UpdateAsync(post);
        posts = posts.OrderByDescending(p => p.IsFavorite).ThenByDescending(p => p.CreatedAt).ToList();
        StateHasChanged();
    }

    private void OpenEditModal(Post post)
    {
        editingPost = post;
        editPostText = post.Text;
        isEditModalOpen = true;
    }

    private void CloseEditModal()
    {
        isEditModalOpen = false;
    }

    private async Task SaveEdit()
    {
        if (editingPost != null)
        {
            editingPost.Text = editPostText;
            editingPost.IsEdited = true;
            await PostRepositoryAsync.UpdateAsync(editingPost);
        }
        isEditModalOpen = false;
    }
}