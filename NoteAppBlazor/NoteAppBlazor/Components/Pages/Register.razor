@page "/register"
@using Domain.Repositories
@using Model.Entities
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject UserRepositoryAsync UserRepositoryAsync

<PageTitle>Registrieren</PageTitle>

<div class="container d-flex justify-content-center align-items-center">
    <div class="card p-4 shadow-lg" style="width: 35vw; border-radius: 15px;">
        <h2 class="text-center text-primary mb-4">Registrieren</h2>

        <EditForm Model="registerModel" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            
            <div class="mb-3">
                <label for="username" class="form-label fw-bold">Benutzername</label>
                <InputText id="username" class="form-control" placeholder="Gib deinen Benutzernamen ein" @bind-Value="registerModel.Username" />
                <ValidationMessage For="() => registerModel.Username" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="email" class="form-label fw-bold">Email</label>
                <InputText id="email" class="form-control" placeholder="Gib deine Email ein" @bind-Value="registerModel.Email" />
                <ValidationMessage For="() => registerModel.Email" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="password" class="form-label fw-bold">Passwort</label>
                <InputText id="password" type="password" class="form-control" placeholder="********" @bind-Value="registerModel.PasswordHash" />
                <ValidationMessage For="() => registerModel.PasswordHash" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary w-100">Registrieren</button>
        </EditForm>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3">@errorMessage</div>
        }
    </div>
</div>

@code {
    private User registerModel = new User();
    private string errorMessage = string.Empty;

    private async Task HandleValidSubmit()
    {
        var existingEMail = await UserRepositoryAsync.FindByEmailAsync(registerModel.Email);
        if (existingEMail != null)
        {
            errorMessage = "Diese E-Mail wird bereits verwendet.";
            return;
        }
        
        var existingUsername = await UserRepositoryAsync.FindByUsernameAsync(registerModel.Username);
        if (existingUsername != null)
        {
            errorMessage = "Dieser Username wird bereits verwendet.";
            return;
        }

        // Automatisch das Erstellungsdatum setzen
        registerModel.CreatedAt = DateTime.UtcNow;

        // Nutzer speichern
        await UserRepositoryAsync.CreateAsync(registerModel);

        Console.WriteLine($"Neuer Benutzer registriert: {registerModel.Email}");
        Navigation.NavigateTo("/weather"); // Nach Registrierung zum Login weiterleiten
    }
}
