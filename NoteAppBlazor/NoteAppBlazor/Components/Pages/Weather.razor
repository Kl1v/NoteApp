@page "/weather"
@using Domain.Repositories
@using Model.Entities
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject UserRepositoryAsync UserRepositoryAsync
@inject LogInState LogInState

<PageTitle>Login</PageTitle>

<div class="container d-flex justify-content-center align-items-center vh-100">
    <div class="card p-4 shadow-lg" style="width: 400px; border-radius: 15px;">
        <h2 class="text-center text-primary mb-4">Login</h2>

        <EditForm Model="loginModel" OnValidSubmit="HandleValidSubmit" FormName="LoginForm">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label for="email" class="form-label fw-bold">Email</label>
                <InputText id="email" class="form-control" placeholder="Gib deine Email ein" @bind-Value="loginModel.Email" />
                <ValidationMessage For="() => loginModel.Email" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="password" class="form-label fw-bold">Passwort</label>
                <InputText id="password" type="password" class="form-control" placeholder="********" @bind-Value="loginModel.Password" />
                <ValidationMessage For="() => loginModel.Password" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary w-100">Anmelden</button>
        </EditForm>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3">@errorMessage</div>
        }
    </div>
</div>

@code {
    private LogIn loginModel = new LogIn();

    private string errorMessage = string.Empty;

    

    private async Task HandleValidSubmit()
    {
        var user = await UserRepositoryAsync.FindByEmailAsync(loginModel.Email);

        if (user == null)
        {
            errorMessage = $"Benutzer nicht gefunden. {loginModel.Email}"; 
            return;
        }

        if (user.PasswordHash != loginModel.Password)
        {
            errorMessage = "Falsches Passwort.";
            return;
        }
        
        LogIn session = new LogIn
        {
            Id = user.Id,
            Username = user.Username,
            Email = user.Email
        };
        LogInState.SetSession(session); 
        Console.WriteLine("----------------------------------------------");
        Console.WriteLine($"Benutzer angemeldet: {user.Email}");
        Navigation.NavigateTo("/");
    }

    private bool VerifyPassword(string enteredPassword, string storedHash)
    {
        return enteredPassword == storedHash; 
    }
}
